#!/bin/bash

# GitWebby update script

function techo { echo $'\t' "$@"; }
function ttecho { echo $'\t' $'\t' "$@"; }
function path_lastn_sep {
    in_name="$1"
    n=$2
    sep=$3

    seplen="${#sep}"
    name="$in_name"
    nnm=""  # normalized name
    _i=0
    while [[ $_i -le $n ]]; do     bnm=$(basename "$name");     nnm="${sep}${bnm}${nnm}";     name=$(dirname "$name"); ((_i++)); done
    echo "${nnm:$seplen}"
}

echo
echo GITWEBBY UPDATE SCRIPT
echo STARTING LOCAL DEPLOYMENT OF A WEB BROWSABLE VERSION OF YOUR SOURCE CODE
echo GIT REPOSITORIES.

echo
echo 1. PARSE ARG ENV VARS
echo OPT ARG --proj=0 is the first command argument and it is optional
echo - --proj=1 means there is 1 folder "in" between the root of the repo dirs
echo ...and the individual repo dirs.
echo - --proj=2 means there are 2 folders "in" between the root of the repo dirs
echo ...and the individual repo dirs.
echo 1ST PATH ARG is required and it is the path to your root of repositories
echo ...and must have n \(from --proj=n, omitted default is 0\) directories in-
echo ...between the root and an actual repository directory. The root folder
echo ...name will be the display name above your list of repositories "in" the
echo ...GitWebby UI.
echo 2ND PATH ARG is required and is the path to your local gitwebby instance
echo ...\(gitwebby code repository\).
echo - GITWEBBY_FORCE env var, 1 means force all files to write without skipping
echo - GITWEBBY_REMOTE env var, 1 means to include remote branches
echo - GITWEBBY_1BRANCH env var, 1 means to only process 1 branch per repo
echo 2. DEFINE PROGRAM VARS
echo - bt, back-tick
echo - btrepl, back-tick replacement unique id tag
echo - datdir, data dir
echo - dotdir, .gitwebby dir
echo - n, --proj=n number of intermediary directories between root and repo
echo - rpd, repository list directory \(arg1\)
echo - rtd, return directory \("in" case running as source script\)
echo - upd, update directory \(arg2\)
echo - vt, vertical-tab
echo - vtrepl, vertical-tab replacement unique id tag
echo ...
{
    # obtain script path
    pth="$(pwd)";cd $(dirname "$0");
    script="$(pwd)";cd $pth;
    # env variable overrides
    : ${GITWEBBY_FORCE:=0}
    : ${GITWEBBY_REMOTE:=0}
    : ${GITWEBBY_1BRANCH:=0}

    techo "GITWEBBY_1BRANCH $GITWEBBY_1BRANCH"
    techo "GITWEBBY_FORCE   $GITWEBBY_FORCE"
    techo "GITWEBBY_REMOTE  $GITWEBBY_REMOTE"

    rtd=$(pwd)
    n=0
    if [[ "${1:0:7}" = "--proj=" ]]; then
        n="${1:7}"
        shift
    fi
    rpd="${1%/}"
    upd="${2%/}"

    valid=1
    if [[ ! -d "$rpd" ]]; then
        valid=0
    fi
    if [[ ! -d "$upd" ]]; then
        valid=0
    fi
    if [[ $valid -eq 0 ]]; then
        techo 1>&2
        techo "Error: invalid directories specified." 1>&2
        techo "Standard Usage:" 1>&2
        techo "  bin/gitwebbyupd --proj=0 root_of_all_repos_dir deploy_dir" 1>&2
        techo "where n in --proj=n is the number of directories in-between the path of the root_of_all_repos_dir and an actual source repository folder path." 1>&2
        exit 1;
    fi
    cd "${upd}" 1>>/dev/null
    upd=$(pwd)
    cd - 1>>/dev/null
    cd "${rpd}" 1>>/dev/null
    rpd=$(pwd)
    cd - 1>>/dev/null
    dotdir="${upd}/.gitwebby"
    datdir="${upd}/data"
    bt=$'`'
    vt=$'\v'
    btrepl="<"$'<'"gitwebby_backtick"">"$'>'
    vtrepl="<"$'<'"gitwebby_verttab"">"$'>'
}
echo ... DONE

echo
echo FIND REPO LIST NAME
echo 1. CREATE .gitwebby/lkp/dc FOLDER HIERARCHY
echo 2. EMPTY .gitwebby/repos.txt FILE
echo 3. repolistnm = BASE NAME OF rpd
echo 4. STORE repolistnm IN data/repo-list.js FILE
echo ...
{
    mkdir -p "$dotdir"
    mkdir -p "$datdir"
    mkdir -p "${dotdir}/lkp"
    mkdir -p "${dotdir}/lkp/dc"
    echo >"${dotdir}/repos.txt"
    repolistnm=$(basename "$rpd")
    techo "$repolistnm"
    echo "window.REPO_LIST={name:'${repolistnm}'}" >"${datdir}/repo-list.js"
    cd "$rpd"
}
echo ... DONE

echo
echo FIND REPO PATHS
echo np1 IS n \(--proj=n\) PLUS 1
echo TRAVERSAL: lst STARTS AS ls rpd
echo i IS 0
echo WHILE i IS LESS THAN OR EQUAL TO np1
echo ...ITERATE dir AS ls lst
echo ......IF i IS n THEN ADD TO REPO-LIST
echo ......ELSE APPEND ls dir TO lst
echo ...
{
    lst="${rpd}"
    
    i=0

    np1=$((n+1))
    echo > "${dotdir}/repo-paths.txt"
    while [ $i -le $np1 ];
    do
        oldlst="$lst"
        lst=""
        for dir in `echo "$oldlst"`;
        do
            d="${dir}"

            cd "$d" 1>>/dev/null 2>>/dev/null
            if [[ $? -gt 0 ]]; then
                continue
            fi

            if [[ $i -eq $np1 ]]; then
                fullp=$(pwd)
                if [[ ! -d "${fullp}/.git" ]];then
                    techo - "$fullp"
                    continue;
                fi
                techo + "$fullp"
                echo "${fullp}" >> "${dotdir}/repo-paths.txt"
                j=$n
                ((j++))
            else
                newlst=""
                for item in `ls -d */`;
                do
                    nl=$'\n'
                    newlst="${newlst}${nl}${d%/}/${item}"
                done
                lst="${lst}
${newlst}"
            fi
        done
        ((i++))
    done
}
echo ... DONE

echo
echo FIND BRANCHES
echo FOR fullp IN .gitwebby/repo-paths.txt
echo ...branches = LIST BRANCHES IN fullp \(git branch\)
echo ...mbranch = CURRENT BRANCH IN fullp \(git rev-parse --abbrev-ref HEAD\)
echo ...norm_name IS NORMALIZED fullp THAT CAN BE SAVED AS A FILENAME
echo ...mb_lkp IS MAIN BRANCH LOOKUP STORED IN .gitwebby/lkp/mb/norm_name.txt
echo ...ab_lkp IS ALL BRANCH LOOKUP STORED IN  .gitwebby/lkp/ab/norm_name.txt
echo ...LOOKUP IS CREATED WITH CONTENT: fullp TAB \{mbranch\|branches\}
echo ...
{
    # mb => main branch lookup
    # ab => all branch lookup
    mkdir -p "${dotdir}/lkp"
    mkdir -p "${dotdir}/lkp/mb"
    mkdir -p "${dotdir}/lkp/ab"
    rm "${dotdir}/lkp/mb/*.txt" 1>>/dev/null 2>>/dev/null
    rm "${dotdir}/lkp/ab/*.txt" 1>>/dev/null 2>>/dev/null
    tab=$'\t'
    for fullp in `cat "${dotdir}/repo-paths.txt"`
    do
        cd "$fullp"
        norm_name=$(path_lastn_sep "$fullp" $n "__")  #$(basename "$fullp" | sed 's/\//__/g')
        mbranch=$(git rev-parse --abbrev-ref HEAD)
        branches=""
        branch_filt="--list"
        if [[ $GITWEBBY_REMOTE -eq 1 ]]; then branch_filt="--all"; fi
        if [[ $GITWEBBY_1BRANCH -eq 1 ]]; then
            branches=$(echo "$mbranch")
        else
            branches=$(git branch "$branch_filt" 2>>/dev/null| sed 's/remotes\/origin\///g' | grep -v "\->" | sed 's/\*//' | sed 's/ //g' | sed "s/'//g" | sort | uniq)
        fi
        mb_lkp="${dotdir}/lkp/mb/${norm_name}.txt"
        ab_lkp="${dotdir}/lkp/ab/${norm_name}.txt"
        techo "$mb_lkp"
        techo "$ab_lkp"
        echo "${fullp}${tab}${mbranch}" > "$mb_lkp"
        echo "${fullp}${tab}${branches}" > "$ab_lkp"

        echo "$mbranch" >"${dotdir}/${norm_name}.m.txt"
        echo "$branches" >"${dotdir}/${norm_name}.b.txt"
    done
}
echo ... DONE

echo
echo FIND COMMITS
echo FOR ab IN .gitwebby/lkp/ab/\*.txt
echo ...EXTRACT branches FROM FILE
echo ...FOR b in branches
echo ......tab VAR IS TAB
echo ......commits \(git log b --pretty=format:$'%H$tab%an$tab%aI$tab%s'\)
echo ......CREATE LOOKUP .gitwebby/lkp/cmmt/${norm_name}.${b}.txt
echo ...
{
    nl=$'\n'
    tab=$'\t'
    mkdir -p "${dotdir}/lkp/cmmt"
    rm "${dotdir}/lkp/cmmt/*.txt" 1>>/dev/null 2>>/dev/null

    for ab in ${dotdir}/lkp/ab/*.txt
    do
        branch_info=$(cat "$ab")
        fullp=$(echo "$branch_info" | head -1 | cut -d $'\t' -f 1)
        branches=$(echo "$branch_info" | cut -d $'\t' -f 2)
        norm_name=$(path_lastn_sep "$fullp" $n "__")  # $(basename "$fullp" | sed 's/\//__/g')

        cd "$fullp"
        for b in `echo "$branches"`
        do
            remote=$(git remote| head -1)
            if [[ -n "$remote" ]]; then
                remote="${remote}/"
            else
                remote=""
            fi
            commits=$(git log "${remote}${b}" --pretty=format:"%H$tab%an$tab%aI$tab%s" 2>>/dev/null)
            if [[ $? -gt 0 ]]; then
                # branch doesn't exist yet in remote
                commits=$(git log "${b}" --pretty=format:"%H$tab%an$tab%aI$tab%s")
            fi
            commits=$(echo "${fullp}${tab}${b}${nl}${commits}" | sed "s/'//g")
            lkp="${dotdir}/lkp/cmmt/${norm_name}.${b}.txt"
            echo "$commits" > "$lkp"
            techo "$lkp"
        done
    done
}
echo ... DONE

echo
echo FIND FILES, WRITE JS FOR MANIFESTS
echo b IS BRANCH NAME, c IS COMMIT HASH, normname is normalized repo name
echo fl DIR STORES COMMITTED FILENAMES
echo FOR cmmt IN .gitwebby/lkp/cmmt
echo ...COMMIT MANIF = \(git show --pretty="format:" --name-only cmmt\)
echo ...STORE COMMIT_MANIF IN .gitwebby/lkp/fl
echo ...CREATE TXT FILES IN .gitwebby/lkp/fl/normname.b.c.txt
echo ...FOR frec IN SNAPSHOT \(git ls-tree -r $c \| cut -d ' ' -f 3-4\)
echo ......SAVE SNAPSHOT FILENAMES TO SNAP_MANIF IN JS
echo ... STORE DIFF IN \(git show --unified=0 c \>.gitwebby/lkp/dc/c.diff\)
echo A COMMIT MANIFEST LIST ONLY FILES ADDED/DELETED/MODIFIED IN THE COMMIT
echo A SNAPSHOT MANIFEST LISTS EVERY FILE IN EXISTENCE AT THE TIME OF COMMIT
echo ...
{
    mkdir -p "${dotdir}/lkp/fl"  # file lookup
    rm "${dotdir}/lkp/fl/*.txt" 1>>/dev/null 2>>/dev/null

    tab=$'\t'
    nl=$'\n'
    brnchn=$(ls "${dotdir}/lkp/cmmt" | wc -l)
    brnchi=0
    for cmmt_info in ${dotdir}/lkp/cmmt/*.txt
    do
        ((brnchi++))
        techo "> processing branches: ${brnchi} of ${brnchn}"
        first_line=$(cat "$cmmt_info" | head -1)
        fullp=$(echo "$first_line" | cut -d $'\t' -f 1)
        cd "$fullp"
        normname=$(path_lastn_sep "$fullp" $n "__")  # $(basename "$fullp" | sed 's/\//__/g')
        b=$(echo "$first_line" | cut -d $'\t' -f 2)
        remaining_lines=$(cat "$cmmt_info" | tail -n +2)
        commits=$(echo "$remaining_lines" | sed "s/'//g")
        echo "$commits">"${dotdir}/${normname}.${b}.c.txt"
        oIfs="$IFS"
        IFS=$'\n'
        cmmti=0
        cmmtn=$(echo "$commits" | wc -l)
        for cmmt in `echo "$commits"`;
        do
            ((cmmti++))
            if [[ "${cmmti:${#cmmti}-1:1}" = "1" ]]; then
	        ttecho "processing commits: ${cmmti} of ${cmmtn}"
            elif [[ $cmmti -eq $cmmtn ]]; then
                ttecho "processing commits: ${cmmti} of ${cmmtn}"
            fi
            c=$(echo "$cmmt" | cut -d "$tab" -f 1)
            # PERF_IMPROV {_
            if [[ -f "${datdir}/c_${c}.cmmtmanifest.js" ]]; then
                if [[ $GITWEBBY_FORCE -eq 0 ]]; then
                    continue
                fi
            fi
            # _}
            files=$(git show --pretty="format:" --name-only $c)
            # PERF_OPTIMIZE echo >"${dotdir}/c_${c}.cmmtmanifest.txt"
            echo "if (window.CMMT_MANIF==null)window.CMMT_MANIF={};window.CMMT_MANIF['${c}']=[];" >"${datdir}/c_${c}.cmmtmanifest.js"
            
            index=$(git ls-tree -r $c | cut -d ' ' -f 3-4)
            echo "$index" >"${dotdir}/c_${c}.snapmanifest.txt"
            echo "if (window.SNAP_MANIF==null)window.SNAP_MANIF={};window.SNAP_MANIF['${c}']=[];" >"${datdir}/c_${c}.snapmanifest.js"

            for frec in `echo "$index"`;
            do
                fhash=$(echo "$frec" | cut -d "${tab}" -f 1)
                f=$(echo "$frec" | cut -d "${tab}" -f 2)
                echo "window.SNAP_MANIF['${c}'].push({fhash:'${fhash}', fnm:'${f}'});" >>"${datdir}/c_${c}.snapmanifest.js"
            done

            git show --unified=0 $c >"${dotdir}/lkp/dc/${c}.diff"
            echo "${fullp}${tab}${b}${tab}${c}${nl}${files}" > "${dotdir}/lkp/fl/${normname}.${b}.${c}.txt"
        done
    done
}
echo ... DONE

echo
echo WRITE FILE CONTENTS TO DATA JS FILES
echo EXCEPT FOR NON-TEXT FILES
echo \(THE \`file --list\` COMMAND SHOWS SOURCE CODE FILES ARE REPORTED WITH
echo \'text\' IN THE OUTPUT WHEN RUNNING \`file filename\` SO WE DETERMINE
echo IF IT IS A TEXT FILE BY SEARCHING FOR \'text\' IN THE OUTPUT OF THE file
echo COMMAND\)
echo WITH THE FOLLOWING STRING REPLACEMENTS
echo 0.\ btrepl VARIABLE IS A UNIQUE ID UNLIKELY TO BE FOUND IN SOURCE CODE
echo a.\ vtrepl VARIABLE IS A UNIQUE ID UNLIKELY TO BE FOUND IN SOURCE CODE
echo 1.\ FCS = [F]ILE [C]ONTENT [S]TRING
echo a.\ FCS REPLACE '`' WITH \$\{btrepl\}
echo b.\ FCS REPLACE \$\{ WITH \$ \$\{btrepl\} \{
echo 2.\ [T]EMPLATE [C]ONTENT [S]TRING = '`FCS`'
echo a.\ TCS.replaceAll\(\$\{btrepl\}, '`'\)
echo b.\ TCS.replaceAll\(\$\{vtrepl\}, "'')"
{
    cmmtn=$(ls "${dotdir}/lkp/fl" | wc -l)
    cmmti=0
    for file_info_file in ${dotdir}/lkp/fl/*.txt
    do
        ((cmmti++))
        if [[ "${cmmti:${#cmmti}-1:1}" = "1" ]]; then
	    techo "> processing commits: ${cmmti} of ${cmmtn}"
        elif [[ $cmmti -eq $cmmtn ]]; then
            techo "> processing commits: ${cmmti} of ${cmmtn}"
        fi

        file_info=$(cat "$file_info_file")
        first_line=$(echo "$file_info" | head -1)
        fullp=$(echo "$first_line" | cut -d $'\t' -f 1)
        normname=$(path_lastn_sep "$fullp" $n "__")  # $(basename "$fullp" | sed 's/\//__/g')
        b=$(echo "$first_line" | cut -d $'\t' -f 2)
        c=$(echo "$first_line" | cut -d $'\t' -f 3)
        remaining_lines=$(echo "$file_info" | tail -n +2)
        files="$remaining_lines"
        cd "$fullp"

        if [[ -d "${datdir}/${normname}" ]]; then
            rm -rf "${datdir}/${normname}"
        fi
        mkdir "${datdir}/${normname}"
        mkdir "${datdir}/${normname}/${b}"

        for f in `echo "$files"`;
        do
            normfnm=$(echo "${f}" | sed 's/\//__/g' | sed 's/ /--/g' | sed 's/\./--/g')
            if [ ! -f "${datdir}/${normname}/${b}/${normfnm}.js" ]; then
                echo "if (window.FILE_HIST==null) window.FILE_HIST={};window.FILE_HIST['${normname}__${b}__${normfnm}']=[];" >>"${datdir}/${normname}/${b}/${normfnm}.js"
            fi
            echo "window.FILE_HIST['${normname}__${b}__${normfnm}'].push('${c}');" >>"${datdir}/${normname}/${b}/${normfnm}.js"
            fhash=$(git rev-parse "${c}:${f}" 2>/dev/null)
            err=$?
            if [[ err -gt 0 ]]; then
                # file was deleted in this commit
                # PERF_OPTIMIZE
                continue
            fi
            fhash=$(echo "$fhash" | cut -d ':' -f 1)
            # PERF_IMPROV {_
            if [[ -f "${dotdir}/f_${fhash}.txt" ]]; then
                if [[ $GITWEBBY_FORCE -eq 0 ]]; then
                    continue;
                fi
            fi
            # _}
            content=$(git show "${c}:${f}" | tr -d '\0' | cat)
            ext=$([[ "$f" = *.* ]] && echo ".${f##*.}" || echo '')
            slash=$(echo "$ext" | grep "/")
            if [[ -n "$slash" ]]; then ext=''; fi
            (git show "${c}:${f}" > "${datdir}/a_${fhash}${ext}")

            # PERF_OPTIMIZE
            echo "window.CMMT_MANIF['${c}'].push({fhash:'${fhash}', fnm:'${f}'});" >>"${datdir}/c_${c}.cmmtmanifest.js"
            esc_content=$(echo "$content" | sed "s/${bt}/${btrepl}/g" | sed 's/${/$'${vtrepl}'{/g')  #  sed "s/[\\]*${bt}/\\\\${bt}/g"
            echo "$content" >"${dotdir}/f_${fhash}.txt"
            ftype=$(file "${dotdir}/f_${fhash}.txt"| cut -d ":" -f 2 | sed -e 's/^[[:space:]]*//')
            ftype_text=$(echo "$ftype" | grep text | wc -l)
            overwrite=""
            if [[ $ftype_text -eq 0 ]]; then
                # overwrite contents with file type
                overwrite="file content ommitted for file type: <${ftype}>"
                echo "$overwrite" >"${dotdir}/f_${fhash}.txt"
            fi
            echo "if(window.FILES==null){window.FILES={};}window.FILES['${fhash}']=String.raw\`${esc_content}\`.replaceAll('${btrepl}', '${bt}').replaceAll('${vtrepl}', '');" >"${datdir}/f_${fhash}.js"
            if [[ -n "$overwrite" ]]; then
                echo "if(window.FILES==null){window.FILES={};}window.FILES['${fhash}']=String.raw\`${overwrite}\`.replaceAll('${btrepl}', '${bt}').replaceAll('${vtrepl}', '');" >"${datdir}/f_${fhash}.js"
            fi
        done
    done
}
echo ... DONE


echo
echo WRITE INFO FOR REPOS LIST
echo FOR fullp IN .gitwebby/repo-paths.txt
echo ...EXTRACT name FROM fullp
echo ...EXTRACT readme FROM ls
echo ...EXTRACT descr FROM INITIAL readme LINES
echo ...EXTRACT authors FROM \(git log --pretty=format:%an\)
echo ...EXTRACT mod_date FROM \(git log --date=iso-strict\)
echo ...STORE ALL COMMIT FIELDS IN TAB-DELIMITED .gitwebby/repos.txt
echo ...
{
    for fullp in `cat "${dotdir}/repo-paths.txt"`
    do
        cd "$fullp"
        name="$fullp"  # $(basename "$fullp" | sed 's/\//__/g')
        name=$(path_lastn_sep "$fullp" $n '/')
        readme=$(ls | grep -i readme | head -1)
        descr=""
        if [[ -n "$readme" ]]; then
            line1=$(cat "$readme" | head -1)
            descr="$line1"
            md=$(echo "$line1" | grep "^#" | wc -l)
            if [[ md -gt 0 ]]; then
                line2=$(cat "$readme" | head -2 | tail -1)
                line3=$(cat "$readme" | head -3 | tail -1)
                if [[ "${line2:0:1}" =~ [a-z] ]]; then
                    descr="$line2"
                elif [[ "${line2:0:1}" =~ [A-Z] ]]; then
                    descr="$line2"
                fi
                if [[ "${line3:0:1}" =~ [a-z] ]]; then
                    descr="$line3"
                elif [[ "${line3:0:1}" =~ [A-Z] ]]; then
                    descr="$line3"
                fi
            fi
            #descr=$(cat "$readme" | grep -v "^#" | grep -v "^[a-z]" | grep -v "^$" | head -1)
        fi
        descr=$(echo "$descr")
        authors=$(git log --pretty=format:"%an" | sort | uniq | sed -z 's/\n/,/g')
        authlen=${#authors}
        ((authlen--))
        authors="${authors:0:$authlen}"
        mod_date=$(git log --date=iso-strict | grep "^Date:" | sed 's/Date://' | sed 's/ //g' |  head -1)
        tab=$'\t'
        echo "${name}${tab}${mod_date}${tab}${authors}${tab}${descr}" >>"${dotdir}/repos.txt"
    done
}
echo ... DONE


echo
echo WRITE JS FOR REPOS LIST
echo b IS BRANCH NAME, normname IS NORMALIZED REPO NAME
echo FOR reporec in .gitwebby/repos.txt
echo ...PLACE TABBED DATA INTO \'COMMITS\' JS VAR
echo OUTPUTS: data/normname.b.commits.js data/repos.js data/branches.js
echo ...
{
    repojs="window.REPOS=["
    rjs="window.BRANCHES={"
    oldIfs="$IFS"
    IFS='
'
    for reporec in `cat "${dotdir}/repos.txt"`;
    do
        rec=$(echo "$reporec" | sed -z 's/\t/\n/g')
        repojs="${repojs}{"
        keys='name
last_mod
authors
descr'
        i=1
        name=""
        for col in `echo "${rec}"`;
        do
            key=$(echo "$keys" | head -"${i}" | tail -1)
            if [[ $i -eq 1 ]]; then
                name="$col"
            fi
            repojs="${repojs}${key}:"
            repojs="${repojs}'${col}',"
            ((i++))
        done
        repojs="${repojs}},"
        normname=$(path_lastn_sep "$name" $n "__")  # $(echo "$name" | sed 's/\//__/g')
        mainb=$(cat "${dotdir}/${normname}.m.txt")
        rjs="${rjs}'$normname':{main:'${mainb}',branches:["
        for b in `cat "${dotdir}/${normname}.b.txt"`;
        do
            rjs="${rjs}'${b}',"
            cjs="if (window.COMMITS==null)window.COMMITS={};window.COMMITS['${normname}']=["  #commits js
            for c in `cat "${dotdir}/${normname}.${b}.c.txt"`;
            do
                ti=0
                cjs="${cjs}{"  # {hash:'${c}',descr:'',timestamp:''}),"
                oIfs=$IFS
                IFS=$'\t'
                for ccol in `echo "$c"`;
                do
                    if [[ $ti -eq 0 ]]; then
                        cjs="${cjs}hash:'${ccol}',"
                    elif [[ $ti -eq 1 ]]; then
                        cjs="${cjs}author:'${ccol}',"
                    elif [[ $ti -eq 2 ]]; then
                        cjs="${cjs}timestamp:'${ccol}',"
                    else
                        cjs="${cjs}subject:'${ccol}',"
                    fi
                    ((ti++))
                done
                IFS=$oIfs
                cjs="${cjs}},"
                
            done
            cjs="${cjs}];"
            echo "${cjs}" >"${datdir}/${normname}.${b}.commits.js"
        done
        rjs="${rjs}]},"
    done
    IFS="$oldIfs"
    repojs="${repojs}];"
    rjs="${rjs}};"
    echo "$repojs" >"${datdir}/repos.js"
    echo "$rjs" >"${datdir}/branches.js"
}
echo ... DONE

echo
echo PROCESS DIFFS BY PARSING COMMIT DIFFS AND
echo WRITE INDIVIDUAL FILE DIFF CONTENTS TO DATA JS FILES
echo WITH THE FOLLOWING STRING REPLACEMENTS
echo 0.\ btrepl VARIABLE IS A UNIQUE ID UNLIKELY TO BE FOUND IN SOURCE CODE
echo a.\ vtrepl VARIABLE IS A UNIQUE ID UNLIKELY TO BE FOUND IN SOURCE CODE
echo 1.\ FCS = [F]ILE [C]ONTENT [S]TRING
echo a.\ FCS REPLACE '`' WITH \$\{btrepl\}
echo b.\ FCS REPLACE \$\{ WITH \$ \$\{btrepl\} \{
echo 2.\ [T]EMPLATE [C]ONTENT [S]TRING = '`FCS`'
echo a.\ TCS.replaceAll\(\$\{btrepl\}, '`'\)
echo b.\ TCS.replaceAll\(\$\{vtrepl\}, "'')"
{
    # PRODUCE FILE DIFFS
    # PERF_OPTIMIZATION (use lookup file instead of extra nesting)
    #   lkp/dc [l]oo[k]u[p] [d]iff of [c]ommit
    #   cat lkp/dc/{hash} => commit diff
    diffcnt=$(ls "${dotdir}"/lkp/dc/ | wc -l)
    diffi=0
    nl=$'\n'
    hdr="if (window.DIFFS==null){window.DIFFS={};}window.DIFFS["

    for f in "${dotdir}"/lkp/dc/*.diff;
    do
        ((diffi++))
        if [[ "${diffi:${#diffi}-1:1}" = "1" ]]; then
            techo "processing diffs..${diffi} of ${diffcnt}"
        elif [[ $diffi -eq $diffcnt ]]; then
            techo "processing diffs..${diffi} of ${diffcnt}"
        fi
        bnm=$(basename "$f")
        cmmt="${bnm%.*}"
        # create diff files, ie: dc_<COMMIT_HASH>.df_<norm-filename>.txt
        #                        dc=>diff commit  df=>diff file

        ifs_parse="$IFS"
        IFS="$nl"
        fp=""
        normnm=""
        fnm=""
        content=""
        flushed=0
        for line in `cat "$f"`;
        do
            if [[ "${line:0:7}" = "commit " ]]; then
                # echo "skipping: ${line}"
                continue
            elif [[ "${line:0:8}" = "Author: " ]]; then
                # echo "skipping: ${line}"
                continue
            elif [[ "${line:0:6}" = "Date: " ]]; then
                # echo "skipping: ${line}"
                continue
            elif [[ "${line:0:7}" = "Merge: " ]]; then
                # echo "skipping: ${line}"
                continue
            elif [[ "${line:0:1}" = " " ]]; then
                # echo "skipping: ${line}"
                continue
            elif [[ "${line:0:7}" = "diff --" ]]; then
                # echo "fp: ${line}"
                if [[ -n "$fp" ]]; then
                    # flush process
                    diff_content_js=$(echo "$content" | sed "s/${bt}/${btrepl}/g" | sed 's/${/$'${vtrepl}'{/g')  #  | sed 's/`/\\`/g' | sed "s/\\\\${bt}/\\${vt}\\${bt}/g" 
                    echo "$hdr'$fnm']=String.raw\`${diff_content_js}\`.replaceAll('${btrepl}', '${bt}').replaceAll('${vtrepl}', '');" >"$datdir/$fnm.js"
                    content=""
                    fp=""
                    normnm=""
                    fnm=""
                fi
                field=$(echo "$line" | cut -d ' ' -f 4)
                if [[ -z "$field" ]]; then
                    field=$(echo "$line" | cut -d ' ' -f 3)
                fi
                fp=$(echo "$field" | sed 's/b\///')
                # PERF_IMPROV {_
                normnm=$(echo "$fp" | sed 's/\//__/g' | sed 's/ /--/g' | sed 's/\./--/g')
                fnm="dc_${cmmt}.df_${normnm}"
                if [[ -f "$datdir/$fnm.js" ]]; then
                    if [[ $GITWEBBY_FORCE -eq 0 ]]; then
                        flushed=1
                        break
                    fi
                fi
                # _}
            elif [[ "${line:0:14}" = "new file mode " ]]; then
                # echo "skipping: ${line}"
                continue
            elif [[ "${line:0:9}" = "new mode " ]]; then
                # echo "skipping: ${line}"
                continue
            elif [[ "${line:0:9}" = "old mode " ]]; then
                # echo "skipping: ${line}"
                continue
            elif [[ "${line:0:18}" = "deleted file mode " ]]; then
                # echo "skipping: ${line}"
                continue
            elif [[ "${line:0:6}" = "index " ]]; then
                # echo "skipping: ${line}"
                continue
            else
                if [[ ! "${line:0:1}" = "+" ]]; then
                    if [[ ! "${line:0:1}" = "-" ]]; then
                        if [[ ! "${line:0:1}" = "@" ]]; then
                            if [[ ! "${line:0:27}" = "\ No newline at end of file" ]]; then
                                if [[ ! "${line:0:15}" = "Binary files a/" ]]; then
                                    if [[ ! "${line:0:22}" = "Binary files /dev/null" ]]; then
                                        if [[ "${line:0:7}" = "rename " ]]; then
                                            :
                                        elif [[ "${line:0:16}" = "similarity index" ]]; then
                                            :
                                        else
                                            echo "WARNING commit=${cmmt}"
                                            echo "WARNING: ${line}"
                                            # exit 1
                                        fi
                                    fi
                                fi
                            fi
                        fi
                    fi
                fi
                content="${content}${line}${nl}"
            fi
        done
        # flush process
        if [[ flushed -eq 0 ]]; then
            diff_content_js=$(echo "$content" | sed "s/${bt}/${btrepl}/g" | sed 's/${/$'${vtrepl}'{/g')  # | sed 's/`/\\`/g' | sed "s/\\\\${bt}/\\${vt}\\${bt}/g"
            echo "$hdr'$fnm']=String.raw\`${diff_content_js}\`.replaceAll('${btrepl}', '${bt}').replaceAll('${vtrepl}', '');" >"$datdir/$fnm.js"
            flushed=0
        fi
        content=""
        fp=""
        normnm=""
        fnm=""
        IFS="$ifs_parse"
    done
}
echo ... DONE

cd "${rtd}"
